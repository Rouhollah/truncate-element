{"version":3,"file":"truncate-element.min.js","mappings":"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","sources":["webpack://truncate-element/webpack/universalModuleDefinition","webpack://truncate-element/webpack/bootstrap","webpack://truncate-element/webpack/runtime/define property getters","webpack://truncate-element/webpack/runtime/hasOwnProperty shorthand","webpack://truncate-element/webpack/runtime/make namespace object","webpack://truncate-element/./src/services.ts","webpack://truncate-element/./src/truncate-element.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"truncate-element\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"truncate-element\"] = factory();\n\telse\n\t\troot[\"truncate-element\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Config, HighlighQuery, IdentifyLink, MyHighLightQuery } from \"./interfaces\";\r\n\r\nexport abstract class ProccessModel {\r\n    constructor(_config: any) { }\r\n    abstract process(word: string | WordModel): WordModel;\r\n}\r\nexport class WordModel {\r\n    word: string = \"\";\r\n    length: number = 0;\r\n    type: string = \"simple\";\r\n    html?: string = \"\";\r\n\r\n    constructor(word: string) {\r\n        this.word = word;\r\n        this.length = word.length;\r\n    }\r\n\r\n}\r\nexport interface Type<T> extends Function {\r\n    new(...args: any[]): T;\r\n}\r\n\r\nexport interface GeneralModel {\r\n    model: Type<ProccessModel>\r\n}\r\n\r\nexport class WordCut {\r\n    Number: number;\r\n\r\n    /**\r\n     * create an instance of WordCut with desired number\r\n     * @param num number\r\n     */\r\n    constructor(num: number) {\r\n        this.Number = num;\r\n    }\r\n\r\n    /**\r\n     * truncate the string to the desired number \r\n     * @param text string\r\n     * @returns string\r\n     */\r\n    cut(text: string): string {\r\n        let i = 0;\r\n        for (i = this.Number; i < text.length; i++) {\r\n            if (text[i] == ' ') break;\r\n        }\r\n        return text.substring(0, i);\r\n    }\r\n}\r\n\r\nexport class Link extends ProccessModel {\r\n    IdentifyLink: IdentifyLink;;\r\n    LinkCount: number = 0;\r\n    LinkList: Array<string> = [];\r\n    constructor(_config: Config) {\r\n        super(_config);\r\n        if (_config.identifyLink)\r\n            this.IdentifyLink = _config.identifyLink;\r\n        else\r\n            this.IdentifyLink = {\r\n                enabled: false\r\n            }\r\n    }\r\n\r\n    /**\r\n     * process model for identifying links\r\n     * @param model WordModel class\r\n     * @returns WordModel\r\n     */\r\n    process(model: WordModel): WordModel {\r\n        // main regex\r\n        // regex = /(^|[ ])(ftp:\\/\\/|(https?:)\\/\\/(www\\\\.)?|www\\.)[0-9a-zA-Z]([-.\\w]+)(((\\:|\\/|\\?){1}\\S*)*|\\w+)+/gm\r\n        let regex;\r\n        let protocolRegex = \"(ftp:\\\\/\\\\/|(https?:)\\\\/\\\\/(www\\\\.)?|www\\\\.)\";\r\n        let domainRegex = \"\";\r\n        let queryString = \"\\\\w+\";\r\n        const afterDomain = \"(((\\\\:|\\\\/|\\\\?){1}\\\\S*)*|\\\\w+)+\";\r\n        if (this.IdentifyLink.protocol && this.IdentifyLink.protocol.length > 0)\r\n            protocolRegex = this.recognizingProtocol();\r\n        if (this.IdentifyLink.domain && this.IdentifyLink.domain.length > 0)\r\n            domainRegex = this.recongnizingDomain();\r\n        if (this.IdentifyLink.hasQueryString)\r\n            queryString = afterDomain;\r\n\r\n        regex = new RegExp(`(^|[ ])${protocolRegex}[0-9a-zA-Z]([-.\\\\w]+)${domainRegex}${queryString}`, 'gm');\r\n\r\n        let m;\r\n        while ((m = regex.exec(model.word)) !== null) {\r\n            this.LinkList.push(m[0]);\r\n            let protocol = m[0];\r\n            if (m[0].substring(0, 3) === 'www') {\r\n                protocol = 'http://' + m[0];\r\n            }\r\n            model.html = `<a href=${protocol} ${this.IdentifyLink.target ? \"target=\" + this.IdentifyLink.target : ''} ${this.IdentifyLink.title ? \"title=\" + this.IdentifyLink.title : ''} ${this.IdentifyLink.class ? \"class=\" + '\"' + this.IdentifyLink.class + '\"' : ''} ${this.IdentifyLink.style ? \"style=\" + this.IdentifyLink.style : ''}>${model.html ? model.html : model.word}</a>`;\r\n            model.type += ' link';\r\n        }\r\n        return model;\r\n\r\n    }\r\n    /** create regex for prefix | protocol\r\n     * @returns {string} regex\r\n     */\r\n    private recognizingProtocol(): string {\r\n        if (this.IdentifyLink.protocol && this.IdentifyLink.protocol.length > 0) {\r\n\r\n            this.IdentifyLink.protocol = this.IdentifyLink.protocol.sort();\r\n            let protocol = [];\r\n            if (this.IdentifyLink.protocol.find(p => p === 'ftp')) {\r\n                protocol.push(\"ftp:\\\\/\\\\/\");\r\n            }\r\n            if (this.IdentifyLink.protocol.find(p => p === 'http')) {\r\n                protocol.push(`http:\\\\/\\\\/(www\\\\.)?`);\r\n            }\r\n            if (this.IdentifyLink.protocol.find(p => p === 'https')) {\r\n                protocol.push(`https:\\\\/\\\\/(www\\\\.)?`);\r\n            }\r\n            if (this.IdentifyLink.protocol.find(p => p === 'www')) {\r\n                protocol.push(\"www\\\\.?\");\r\n            }\r\n            return \"(\" + protocol.join('|') + \")\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /** create regex for domain\r\n     * @returns {string} regex\r\n     */\r\n    private recongnizingDomain(): string {\r\n        return this.IdentifyLink.domain ? \"(\" + this.IdentifyLink.domain.join('|') + \")\" : \"\";\r\n    }\r\n}\r\n\r\nexport class Mention extends ProccessModel {\r\n\r\n    /**\r\n     * process model for identifying mentions\r\n     * @param model {class} WordModel\r\n     * @returns WordModel\r\n     */\r\n    process(model: WordModel): WordModel {\r\n        const pattern = /(^|\\s)(@[^\\d\\.\\s](\\w{1,30}|\\.)+)$/gmi;\r\n        if (pattern.test(model.word)) {\r\n            model.type += ' mention';\r\n            model.html = `<span class=mention style=color:#0095f6>${model.html ? model.html : model.word}</span>`\r\n        }\r\n        return model;\r\n    }\r\n}\r\n\r\nexport class Hashtag extends ProccessModel {\r\n\r\n    /**\r\n     * process model for identifying hashtags\r\n     * @param model {class} WordModel\r\n     * @returns WordModel\r\n     */\r\n    process(model: WordModel): WordModel {\r\n        const pattern = /(^|\\s)(#[\\p{Pc}\\p{N}\\p{L}\\u200cÀ-ÖØ-öø-ʸ(_)]+)$/gmui;\r\n        if (pattern.test(model.word)) {\r\n            model.html = `<span class=hashtag style=color:#1b95e0>${model.html ? model.html : model.word}</span>`;\r\n            model.type += ' hashtag';\r\n        }\r\n        return model;\r\n    }\r\n}\r\n\r\nexport class Highlight extends ProccessModel {\r\n    highlightQuery: Array<MyHighLightQuery> = [];\r\n    highlightCondition: string = '';\r\n    nestedHighlightArray: Array<MyHighLightQuery> = [];\r\n    checkedNestedHighlight: boolean = false;\r\n    constructor(_config: Config) {\r\n        super(_config);\r\n        (<any>window).highlight = this;\r\n        if (_config.highlightList) {\r\n            this.highlightQuery = _config.highlightList.map((h: HighlighQuery | string) => {\r\n                let high: Partial<MyHighLightQuery> = {};\r\n                if (this.instanceOfHighlighQuery(h)) {\r\n                    high.name = h.name;\r\n                    high.color = h.color;\r\n                }\r\n                else {\r\n                    high.name = h;\r\n                    high.color = 'yellow';\r\n                }\r\n                high.tag = '';\r\n                high.index = 0;\r\n                high.existInAnotherQuery = false;\r\n                high.parent = '';\r\n                high.parentTag = '';\r\n                high.content = '';\r\n                return high as MyHighLightQuery;\r\n            });\r\n        }\r\n        else {\r\n            this.highlightQuery = [];\r\n        }\r\n\r\n        this.highlightCondition = _config.highlightCondition;\r\n        if (this.highlightQuery.length) {\r\n            this.highlightQuery.sort((a: MyHighLightQuery, b: MyHighLightQuery): number => {\r\n                return a.name.length - b.name.length;\r\n            })\r\n        }\r\n        if (!this.checkedNestedHighlight)\r\n            this.nestedHighlightArray = this.findHighlightInAnother();\r\n        else\r\n            this.nestedHighlightArray = [];\r\n    }\r\n\r\n    /**\r\n    * finds words in highlightQuery array and color them\r\n    * @returns Array<Sible>\r\n    */\r\n    private findHighlightInAnother(): Array<MyHighLightQuery> {\r\n        const firstElement = this.highlightQuery[0];\r\n        firstElement.tag = this.createTag(firstElement.color, firstElement.name);\r\n        firstElement.existInAnotherQuery = false;\r\n        firstElement.content = '';\r\n        firstElement.parent = '';\r\n        firstElement.parentTag = '';\r\n\r\n        for (let i = 1; i < this.highlightQuery.length; i++) {\r\n            const currentElement = this.highlightQuery[i];\r\n            const perviousElement = this.highlightQuery[i - 1];\r\n            if (currentElement.name.includes(perviousElement.name)) {\r\n                this.transform(currentElement, perviousElement);\r\n                continue;\r\n            }\r\n            else {\r\n                let j = i;\r\n                while (j >= 1) {\r\n                    let pervious = this.highlightQuery[j - 1];\r\n                    if (currentElement.name.includes(pervious.name)) {\r\n                        this.transform(currentElement, pervious);\r\n                        break;\r\n                    }\r\n                    else if (j == 1) {\r\n                        currentElement.tag = this.createTag(currentElement.color, currentElement.name);\r\n                        currentElement.content = '';\r\n                        currentElement.parent = '';\r\n                        currentElement.parentTag = '';\r\n                    }\r\n                    j--;\r\n                }\r\n            }\r\n\r\n        }\r\n        const nestedArray = this.highlightQuery.filter(m => m.existInAnotherQuery);\r\n        this.highlightQuery = this.highlightQuery.filter(m => !m.existInAnotherQuery);\r\n        //console.log('highlightQuery=>', this.highlightQuery, 'nestedArray=>', nestedArray);\r\n\r\n        this.checkedNestedHighlight = true;\r\n        return nestedArray;\r\n    }\r\n\r\n\r\n    private transform(current: MyHighLightQuery, pervious: MyHighLightQuery) {\r\n        // name of current object is parent for pervious object\r\n        pervious.parent = current.name;\r\n        current.content = current.name.replace(pervious.name, pervious.tag);\r\n        pervious.parentTag = this.createTag(current.color, current.content);\r\n        current.tag = pervious.parentTag;\r\n        pervious.existInAnotherQuery = true;\r\n        current.existInAnotherQuery = false;\r\n    }\r\n\r\n    /** is object instance of HighlighQuery \r\n     * @param {object}  object to check\r\n     * @returns {boolean} true or false\r\n    */\r\n    private instanceOfHighlighQuery(object: any): object is HighlighQuery {\r\n        return typeof object === 'string' ? false : 'name' in object;\r\n    }\r\n    /**\r\n        * process model for highlighting\r\n        * @param model WordModel class\r\n        * @returns WordModel\r\n        */\r\n    process(model: WordModel): WordModel {\r\n        if (!this.highlightQuery || !this.highlightQuery.length) {\r\n            return model;\r\n        }\r\n        if (this.highlightCondition == \"exactly\") {\r\n            for (let q of this.highlightQuery) {\r\n                if (q.name.length > model.length) continue;\r\n                const pattern = \"(^|(?<!\\\\p{L}))(\" + q.name + \")(?!(\\\\p{L}))\";\r\n                const regex = new RegExp(pattern, 'gmu');\r\n                if (regex.test(model.word)) {\r\n                    regex.lastIndex = 0;\r\n                    model.html = this.createTag(q.color, q.name);\r\n                    model.type = model.type.concat(' highlight');\r\n                }\r\n                return model;\r\n            }\r\n            return model;\r\n        }\r\n        else {\r\n            if (this.nestedHighlightArray.length) {\r\n                for (let i = this.nestedHighlightArray.length; i--; i == 0) {\r\n                    const nested = this.nestedHighlightArray[i];\r\n                    const regex = new RegExp(nested.name, 'gmi');\r\n                    if (regex.test(model.word)) {\r\n                        regex.lastIndex = 0;\r\n                        model.html = model.word.replace(new RegExp(nested.name, 'gm'), nested.tag);\r\n                        // return model;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (this.highlightQuery.length) {\r\n                for (const q of this.highlightQuery) {\r\n                    const regex = new RegExp(q.name, 'gmi');\r\n                    if (regex.test(model.word)) {\r\n                        regex.lastIndex = 0;\r\n                        if (model.html && model.html.split(q.name).length == 1) {\r\n                            model.html = model.word.replace(new RegExp(q.name, 'gmu'), q.tag);\r\n                        }\r\n                        else if (model.html) {\r\n                            let tag = model.html.split(q.name)\r\n                            for (let index = 0; index < tag.length; index++) {\r\n                                if (index == tag.length - 1)\r\n                                    break;\r\n                                tag[index] = tag[index] + q.tag;\r\n\r\n                            }\r\n                            model.html = tag.join('');\r\n                        }\r\n                        else {\r\n                            model.html = model.word.replace(new RegExp(q.name, 'gmu'), match => {\r\n                                return `<span style=\"background:${q.color}\">${match}</span>`;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return model;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * create span tag with favorite color\r\n     * @param color \r\n     * @param word \r\n     * @returns string\r\n     */\r\n    private createTag(color: string, word: string) {\r\n        return `<span style=\"background:${color}\">${word}</span>`;\r\n    }\r\n}\r\n\r\nexport class NullModel extends ProccessModel {\r\n\r\n    /**\r\n     * get string and convert to WordModel\r\n     * @param model WordModel class\r\n     * @returns WordModel\r\n     */\r\n    process(word: string): WordModel {\r\n        return new WordModel(word);\r\n    }\r\n}\r\n\r\n","import { HighlighQuery, Config, IdentifyLink } from \"./interfaces\";\r\nimport { WordCut, Link, Hashtag, Mention, Highlight, NullModel, GeneralModel, ProccessModel, Type, WordModel } from \"./services\";\r\n\r\nexport class TruncateElement extends HTMLElement {\r\n    _highlightQuery: Array<HighlighQuery | string> = [];\r\n    config: Config = {\r\n        number: 0,\r\n        more: \"\",\r\n        less: \"\",\r\n        completeWord: false,\r\n        hashtag: false,\r\n        hasLiteral: false,\r\n        highlightCondition: 'exactly',\r\n        highlightList: [{ name: '', color: '' }],\r\n        mention: false,\r\n    };\r\n    number: number = 100;\r\n    more: string = \"show\";\r\n    less: string = \"hide\";\r\n    completeWord: boolean = false;\r\n    hashtag: boolean = false;\r\n    hasLiteral: boolean = false;\r\n    highlightCondition: string = 'exactly';\r\n    highlightList: HighlighQuery[] = [{ name: '', color: '' }];\r\n    text: string = \"\";\r\n    /** to display show or hide button*/\r\n    truncated: boolean = false;\r\n    mention: boolean = false;\r\n    identifyLink: IdentifyLink = {\r\n        hasQueryString: false,\r\n        title: \"\",\r\n        class: \"\",\r\n        style: \"text-decoration:none;color:blue;\",\r\n        domain: [],\r\n        protocol: [],\r\n        target: \"_blank\",\r\n        enabled: false\r\n    };\r\n    userModels: Array<GeneralModel> = [];\r\n    linkList: Array<string> = [];\r\n    linkCount: number = 0;\r\n    hashtagCount: number = 0;\r\n    mentionCount: number = 0;\r\n    connectedLoaded = false;\r\n    dataLoaded = false;\r\n    tempHtml = \"\";\r\n    wordArray: Array<string> = [];\r\n    remainText: string = \"\";\r\n    fullText: string = \"\";\r\n    truncatedWord = { model: new WordModel(''), index: 0 };\r\n    processModels: Array<GeneralModel> = [];\r\n    constructor() {\r\n        super();\r\n        (<any>window).trun = this;\r\n        const observer = new MutationObserver(() => {\r\n            if (this.connectedLoaded && !this.dataLoaded) {\r\n                this.initialValues();\r\n            }\r\n        });\r\n        // call 'observe' on that MutationObserver instance, \r\n        // passing it the element to observe, and the options object\r\n        observer.observe(this, { characterData: false, childList: true, attributes: false });\r\n    }\r\n\r\n    addUserModel(...userModel: Array<Type<ProccessModel>>) {\r\n        this.userModels.push(...userModel.map(f => ({ model: f } as GeneralModel)));\r\n    }\r\n\r\n    connectedCallback() {\r\n        setTimeout(() => {\r\n            this.initialValues();\r\n        }, 0)\r\n        this.connectedLoaded = true;\r\n    }\r\n\r\n    attributeChangedCallback(attrName: string, _oldVal: any, _newVal: any) {\r\n        if (this.connectedLoaded) {\r\n            this.initialValues(attrName);\r\n        }\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return ['config'];\r\n    }\r\n    /** initial values */\r\n    private initialValues(attrName: string = \"config\") {\r\n        if (!this.innerHTML) {\r\n            return;\r\n        }\r\n        if (!this.tempHtml) {\r\n            this.tempHtml = this.innerHTML;\r\n        }\r\n\r\n        const conf = this.getAttribute(attrName);\r\n        if (conf?.length) {\r\n            this.config = JSON.parse(conf);\r\n            this.number = this.config.number ? this.config.number : this.number;\r\n            this.more = this.config.more ? this.config.more : this.more;\r\n            this.less = this.config.less ? this.config.less : this.less;\r\n            this._highlightQuery = this.config.highlightList ? this.config.highlightList : this._highlightQuery;\r\n            this.highlightCondition = this.config.highlightCondition ? this.config.highlightCondition : this.highlightCondition;\r\n            this.completeWord = this.config.completeWord ? this.config.completeWord : this.completeWord;\r\n            this.hashtag = this.config.hashtag ? this.config.hashtag : this.hashtag;\r\n            this.hasLiteral = this.config.hasLiteral ? this.config.hasLiteral : this.hasLiteral;\r\n            this.mention = this.config.mention ? this.config.mention : this.mention;\r\n            if (this.config.identifyLink) {\r\n                this.identifyLink.enabled = this.config.identifyLink.enabled;\r\n                this.identifyLink.title = this.config.identifyLink.title ? this.config.identifyLink.title : this.identifyLink.title;\r\n                this.identifyLink.class = this.config.identifyLink.class ? this.config.identifyLink.class : this.identifyLink.class;\r\n                this.identifyLink.style = this.config.identifyLink.style ? this.config.identifyLink.style : this.identifyLink.style;\r\n                this.identifyLink.domain = this.config.identifyLink.domain ? this.config.identifyLink.domain : this.identifyLink.domain;\r\n                this.identifyLink.protocol = this.config.identifyLink.protocol ? this.config.identifyLink.protocol : this.identifyLink.protocol;\r\n                this.identifyLink.target = this.config.identifyLink.target ? this.config.identifyLink.target : this.identifyLink.target;\r\n                this.identifyLink.hasQueryString = this.config.identifyLink.hasQueryString ? this.config.identifyLink.hasQueryString : this.identifyLink.hasQueryString;\r\n            }\r\n        }\r\n        else\r\n            return;\r\n\r\n        this.main(this.tempHtml);\r\n        this.dataLoaded = true;\r\n    }\r\n\r\n\r\n    /** main method, start working \r\n    * @param text {string}\r\n    */\r\n    private main(text: string): void {\r\n        if (!this.hasLiteral)\r\n            text = text.replace(/(\\r\\n\\t|\\r\\n|\\n|\\r\\t)/gm, ' ');\r\n\r\n        this.text = text;\r\n        if (text.length > this.number) {\r\n            this.truncated = true;\r\n            const wordCut = new WordCut(this.number);\r\n            if (this.completeWord)\r\n                text = wordCut.cut(text)\r\n            else {\r\n                text = text.substring(0, this.number);\r\n                const last = this.text.split(\" \")[text.split(\" \").length - 1]\r\n                this.truncatedWord.model = this.reviewTruncatedWordHasLink(last);\r\n                this.truncatedWord.index = text.split(\" \").length - 1;\r\n            }\r\n        }\r\n        // all necessary classes\r\n        this.processModels = this.generateModels();\r\n\r\n        // just once calling each class\r\n        const instances = this.callOnceClasses()\r\n\r\n        const cuttedArray = text.split(\" \");\r\n        const fullArray = this.text.split(\" \");\r\n        const _cuttedwords = this.createWordModelFromString(cuttedArray);\r\n        const _fullwords = this.createWordModelFromString(fullArray);\r\n\r\n        //process all attributes of config and user models defined for each word\r\n        const remain = this.proccessOnWordModels(_cuttedwords, instances);\r\n        const full = this.proccessOnWordModels(_fullwords, instances);\r\n\r\n        if (remain.length) {\r\n            this.remainText = remain.map(m => m.html ? m.html : m.word).join(\" \") + \" ... \";\r\n\r\n            if (!this.completeWord) {\r\n                const l = remain.pop();\r\n                if (l && this.truncatedWord.model.type.includes('link')) {\r\n                    const replacement = this.truncatedWord.model.word;\r\n                    this.remainText = this.remainText.replace(new RegExp(`<a href=${l.word} `), `<a href=${replacement} `)\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.remainText = text + \" ... \";\r\n        }\r\n\r\n        if (full.length) [\r\n            this.fullText = full.map(m => m.html ? m.html : m.word).join(\" \")\r\n        ]\r\n        else {\r\n            this.fullText = this.text;\r\n        }\r\n\r\n        this.truncated ? this.initialText(this.remainText, this.more) : this.initialText(this.fullText);\r\n        //This class is placed in order to apply \\n characters in html\r\n        if (this.hasLiteral)\r\n            this.style.whiteSpace = 'pre-line';\r\n    }\r\n\r\n    /**\r\n     * once calling each class\r\n     * @returns \r\n     */\r\n    private callOnceClasses() {\r\n        const instances: Array<ProccessModel> = [];\r\n        for (const gm of this.processModels) {\r\n            instances.push(new gm.model(this.config));\r\n        }\r\n        return instances;\r\n    }\r\n\r\n    /**\r\n     * review if the word is truncated has link or not\r\n     * @param word string\r\n     * @returns WordModel\r\n     */\r\n    private reviewTruncatedWordHasLink(word: string): WordModel {\r\n        const link = new Link(this.config);\r\n        return link.process(new WordModel(word));\r\n    }\r\n\r\n    /**\r\n     * finally process all attributes of config and user models defined for each word\r\n     * @param _words WordModel[]\r\n     * @param instances ProccessModel[]\r\n     * @returns WordModel[]\r\n     */\r\n    private proccessOnWordModels(_words: Array<WordModel>, instances: Array<ProccessModel>): Array<WordModel> {\r\n        for (let word of _words) {\r\n            for (const gm of instances) {\r\n                if (word.length == 0) continue;\r\n                word = gm.process(word);\r\n            }\r\n        }\r\n        return _words;\r\n    }\r\n\r\n    /**\r\n     * create WordModel class of each wrod\r\n     * @param array {string[]}\r\n     * @returns string[]\r\n     */\r\n    private createWordModelFromString(array: Array<string>) {\r\n        const _words: WordModel[] = [];\r\n        const nullModel = new NullModel(this.config);\r\n        for (const word of array) {\r\n            _words.push(nullModel.process(word));\r\n        }\r\n        return _words;\r\n    }\r\n\r\n    /**\r\n     * generate necessary classes for each word\r\n     * @returns GeneralModel[]\r\n     */\r\n    private generateModels(): Array<GeneralModel> {\r\n        const generalModels: Array<GeneralModel> = [];\r\n\r\n        if (this.config.highlightList?.length)\r\n            generalModels.push({ model: Highlight });\r\n\r\n        if (this.config.identifyLink?.enabled)\r\n            generalModels.push({ model: Link });\r\n\r\n        if (this.config.hashtag)\r\n            generalModels.push({ model: Hashtag });\r\n\r\n        if (this.config.mention)\r\n            generalModels.push({ model: Mention });\r\n\r\n        if (this.userModels?.length) {\r\n            this.userModels.forEach(user => {\r\n                generalModels.push(user);\r\n            });\r\n        }\r\n        return generalModels;\r\n    }\r\n\r\n    /**\r\n     * display text in first time\r\n     * @param text \r\n     * @param toggle \r\n     */\r\n    private initialText(text: string, toggle?: string): void {\r\n        if (toggle) {\r\n            const span = this.createSpan(toggle);\r\n            this.innerHTML = text;\r\n            this.appendChild(span);\r\n        }\r\n        else\r\n            this.innerHTML = text;\r\n    }\r\n\r\n    /**\r\n     * display string after click on toggle text\r\n     * @param text string\r\n     * @param mouseDown mouse event\r\n     */\r\n    private showText(text: string, mouseDown: MouseEvent): void {\r\n        this.truncated = !this.truncated;\r\n        const span = this.createSpan(this.truncated ? this.more : this.less);\r\n        this.innerHTML = text;\r\n        if (this.hasLiteral)\r\n            this.style.whiteSpace = 'pre-line';\r\n        mouseDown.stopPropagation();\r\n        this.appendChild(span);\r\n    }\r\n\r\n    /**\r\n     * create span for toggling\r\n     * @param toggle custom word for toggle\r\n     * @returns \r\n     */\r\n    private createSpan(toggle: string): HTMLSpanElement {\r\n        const span = document.createElement('span');\r\n        span.innerHTML = ' ' + toggle;\r\n        span.style.color = '#ff00ff';\r\n        span.style.cursor = 'pointer';\r\n        span.classList.add(\"toggleText\");\r\n        span.addEventListener('click', (event) => this.showText(this.truncated ? this.fullText : this.remainText, event));\r\n        return span;\r\n    }\r\n\r\n}\r\nif (!customElements.get('truncate-element')) {\r\n    customElements.define('truncate-element', TruncateElement);\r\n}\r\n\r\n\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","ProccessModel","constructor","_config","WordModel","word","length","type","html","this","WordCut","num","Number","cut","text","i","substring","Link","super","LinkCount","LinkList","identifyLink","IdentifyLink","enabled","process","model","regex","protocolRegex","domainRegex","queryString","m","protocol","recognizingProtocol","domain","recongnizingDomain","hasQueryString","RegExp","exec","push","target","title","class","style","sort","find","p","join","Mention","test","Hashtag","Highlight","highlightQuery","highlightCondition","nestedHighlightArray","checkedNestedHighlight","window","highlight","highlightList","map","h","high","instanceOfHighlighQuery","name","color","tag","index","existInAnotherQuery","parent","parentTag","content","a","b","findHighlightInAnother","firstElement","createTag","currentElement","perviousElement","includes","transform","j","pervious","nestedArray","filter","current","replace","object","q","pattern","lastIndex","concat","nested","split","match","NullModel","TruncateElement","HTMLElement","_highlightQuery","config","number","more","less","completeWord","hashtag","hasLiteral","mention","truncated","userModels","linkList","linkCount","hashtagCount","mentionCount","connectedLoaded","dataLoaded","tempHtml","wordArray","remainText","fullText","truncatedWord","processModels","trun","MutationObserver","initialValues","observe","characterData","childList","attributes","addUserModel","userModel","f","connectedCallback","setTimeout","attributeChangedCallback","attrName","_oldVal","_newVal","observedAttributes","innerHTML","conf","getAttribute","JSON","parse","main","wordCut","last","reviewTruncatedWordHasLink","generateModels","instances","callOnceClasses","cuttedArray","fullArray","_cuttedwords","createWordModelFromString","_fullwords","remain","proccessOnWordModels","full","l","pop","replacement","initialText","whiteSpace","gm","_words","array","nullModel","generalModels","forEach","user","toggle","span","createSpan","appendChild","showText","mouseDown","stopPropagation","document","createElement","cursor","classList","add","addEventListener","event","customElements"],"sourceRoot":""}