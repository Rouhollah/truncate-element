{"version":3,"file":"truncate-element.js","mappings":"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","sources":["webpack://truncate-element/./src/base.ts","webpack://truncate-element/./src/services.ts","webpack://truncate-element/./src/truncate-element.ts"],"sourcesContent":["import { Config } from \"./interfaces\";\r\n\r\nexport abstract class ProccessModel {\r\n    constructor(_config: Config) { }\r\n    abstract process(word: string | WordModel): WordModel;\r\n}\r\nexport class WordModel {\r\n    word: string = \"\";\r\n    length: number = 0;\r\n    type: string = \"simple\";\r\n    html?: string = \"\";\r\n\r\n    constructor(word: string) {\r\n        this.word = word;\r\n        this.length = word.length;\r\n    }\r\n\r\n}","import { ProccessModel, WordModel } from \"./base\";\r\nimport { Config, HighlighQuery, IdentifyLink, MyHighLightQuery, Sible } from \"./interfaces\";\r\n\r\nexport class WordCut {\r\n    Number: number;\r\n\r\n    /**\r\n     * create an instance of WordCut with desired number\r\n     * @param num number\r\n     */\r\n    constructor(num: number) {\r\n        this.Number = num;\r\n    }\r\n\r\n    /**\r\n     * truncate the string to the desired number \r\n     * @param text string\r\n     * @returns string\r\n     */\r\n    cut(text: string): string {\r\n        let i = 0;\r\n        for (i = this.Number; i < text.length; i++) {\r\n            if (text[i] == ' ') break;\r\n        }\r\n        return text.substring(0, i);\r\n    }\r\n}\r\n\r\nexport class Link extends ProccessModel {\r\n    IdentifyLink: IdentifyLink;;\r\n    LinkCount: number = 0;\r\n    LinkList: Array<string> = [];\r\n    constructor(_config: Config) {\r\n        super(_config);\r\n        if (_config.identifyLink)\r\n            this.IdentifyLink = _config.identifyLink;\r\n        else\r\n            this.IdentifyLink = {\r\n                enabled: false\r\n            }\r\n    }\r\n\r\n    /**\r\n     * process model for identifying links\r\n     * @param model WordModel class\r\n     * @returns WordModel\r\n     */\r\n    process(model: WordModel): WordModel {\r\n        // main regex\r\n        // regex = /(^|[ ])(ftp:\\/\\/|(https?:)\\/\\/(www\\\\.)?|www\\.)[0-9a-zA-Z]([-.\\w]+)(((\\:|\\/|\\?){1}\\S*)*|\\w+)+/gm\r\n        let regex;\r\n        let protocolRegex = \"(ftp:\\\\/\\\\/|(https?:)\\\\/\\\\/(www\\\\.)?|www\\\\.)\";\r\n        let domainRegex = \"\";\r\n        let queryString = \"\\\\w+\";\r\n        const afterDomain = \"(((\\\\:|\\\\/|\\\\?){1}\\\\S*)*|\\\\w+)+\";\r\n        if (this.IdentifyLink.protocol && this.IdentifyLink.protocol.length > 0)\r\n            protocolRegex = this.recognizingProtocol();\r\n        if (this.IdentifyLink.domain && this.IdentifyLink.domain.length > 0)\r\n            domainRegex = this.recongnizingDomain();\r\n        if (this.IdentifyLink.hasQueryString)\r\n            queryString = afterDomain;\r\n\r\n        regex = new RegExp(`(^|[ ])${protocolRegex}[0-9a-zA-Z]([-.\\\\w]+)${domainRegex}${queryString}`, 'gm');\r\n\r\n        let m;\r\n        while ((m = regex.exec(model.word)) !== null) {\r\n            this.LinkList.push(m[0]);\r\n            let protocol = m[0];\r\n            if (m[0].substring(0, 3) === 'www') {\r\n                protocol = 'http://' + m[0];\r\n            }\r\n            model.html = `<a href=${protocol} ${this.IdentifyLink.target ? \"target=\" + this.IdentifyLink.target : ''} ${this.IdentifyLink.title ? \"title=\" + this.IdentifyLink.title : ''} ${this.IdentifyLink.class ? \"class=\" + '\"' + this.IdentifyLink.class + '\"' : ''} ${this.IdentifyLink.style ? \"style=\" + this.IdentifyLink.style : ''}>${model.html ? model.html : model.word}</a>`;\r\n            model.type += ' link';\r\n        }\r\n        return model;\r\n\r\n    }\r\n    /** create regex for prefix | protocol\r\n     * @returns {string} regex\r\n     */\r\n    private recognizingProtocol(): string {\r\n        if (this.IdentifyLink.protocol && this.IdentifyLink.protocol.length > 0) {\r\n\r\n            this.IdentifyLink.protocol = this.IdentifyLink.protocol.sort();\r\n            let protocol = [];\r\n            if (this.IdentifyLink.protocol.find(p => p === 'ftp')) {\r\n                protocol.push(\"ftp:\\\\/\\\\/\");\r\n            }\r\n            if (this.IdentifyLink.protocol.find(p => p === 'http')) {\r\n                protocol.push(`http:\\\\/\\\\/(www\\\\.)?`);\r\n            }\r\n            if (this.IdentifyLink.protocol.find(p => p === 'https')) {\r\n                protocol.push(`https:\\\\/\\\\/(www\\\\.)?`);\r\n            }\r\n            if (this.IdentifyLink.protocol.find(p => p === 'www')) {\r\n                protocol.push(\"www\\\\.?\");\r\n            }\r\n            return \"(\" + protocol.join('|') + \")\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /** create regex for domain\r\n     * @returns {string} regex\r\n     */\r\n    private recongnizingDomain(): string {\r\n        return this.IdentifyLink.domain ? \"(\" + this.IdentifyLink.domain.join('|') + \")\" : \"\";\r\n    }\r\n}\r\n\r\nexport class Mention extends ProccessModel {\r\n\r\n    /**\r\n     * process model for identifying mentions\r\n     * @param model {class} WordModel\r\n     * @returns WordModel\r\n     */\r\n    process(model: WordModel): WordModel {\r\n        const pattern = /(^|\\s)(@[^\\d\\.\\s](\\w{1,30}|\\.)+)$/gmi;\r\n        if (pattern.test(model.word)) {\r\n            model.type += ' mention';\r\n            model.html = `<span class=mention style=color:#0095f6>${model.html ? model.html : model.word}</span>`\r\n        }\r\n        return model;\r\n    }\r\n}\r\n\r\nexport class Hashtag extends ProccessModel {\r\n\r\n    /**\r\n     * process model for identifying hashtags\r\n     * @param model {class} WordModel\r\n     * @returns WordModel\r\n     */\r\n    process(model: WordModel): WordModel {\r\n        const pattern = /(^|\\s)(#[\\p{Pc}\\p{N}\\p{L}\\u200cÀ-ÖØ-öø-ʸ(_)]+)$/gmui;\r\n        if (pattern.test(model.word)) {\r\n            model.html = `<span class=hashtag style=color:#1b95e0>${model.html ? model.html : model.word}</span>`;\r\n            model.type += ' hashtag';\r\n        }\r\n        return model;\r\n    }\r\n}\r\n\r\nexport class Highlight extends ProccessModel {\r\n    highlightQuery: Array<MyHighLightQuery>;\r\n    highlightCondition: string;\r\n    nestedHighlightArray: Array<Sible>;\r\n    constructor(_config: Config) {\r\n        super(_config);\r\n        (<any>window).highlight = this;\r\n        if (_config.highlightList) {\r\n            this.highlightQuery = _config.highlightList.map((h: HighlighQuery | string) => {\r\n                let high: Partial<MyHighLightQuery> = {};\r\n                if (this.instanceOfHighlighQuery(h)) {\r\n                    high.name = h.name;\r\n                    high.color = h.color;\r\n                }\r\n                else {\r\n                    high.name = h;\r\n                    high.color = 'yellow';\r\n                }\r\n                high.tag = '';\r\n                high.index = 0;\r\n                high.existInAnotherQuery = false;\r\n                return high as MyHighLightQuery;\r\n            });\r\n        }\r\n        else {\r\n            this.highlightQuery = [];\r\n        }\r\n\r\n        this.highlightCondition = _config.highlightCondition;\r\n        if (this.highlightQuery.length) {\r\n            this.highlightQuery.sort((a: MyHighLightQuery, b: MyHighLightQuery): number => {\r\n                return a.name.length - b.name.length;\r\n            })\r\n        }\r\n\r\n        this.nestedHighlightArray = this.findHighlightInAnother();\r\n    }\r\n\r\n    /**\r\n     * process model for highlighting\r\n     * @param model WordModel class\r\n     * @returns WordModel\r\n     */\r\n    process(model: WordModel): WordModel {\r\n        if (!this.highlightQuery || !this.highlightQuery.length) {\r\n            return model;\r\n        }\r\n        if (this.highlightCondition == \"exactly\") {\r\n            for (let q of this.highlightQuery) {\r\n                if (q.name.length > model.length) continue;\r\n                const pattern = \"(^|(?<!\\\\p{L}))(\" + q.name + \")(?!(\\\\p{L}))\";\r\n                const regex = new RegExp(pattern, 'gmu');\r\n                if (regex.test(model.word)) {\r\n                    regex.lastIndex = 0;\r\n                    model.html = this.createTag(q.color, q.name);\r\n                    model.type = model.type.concat(' highlight');\r\n                }\r\n                return model;\r\n            }\r\n            return model;\r\n        }\r\n        else {\r\n            if (this.nestedHighlightArray.length || this.highlightQuery.length) {\r\n                for (const nested of this.nestedHighlightArray) {\r\n                    const regex = new RegExp(nested.parent, 'gmi');\r\n                    if (regex.test(model.word)) {\r\n                        regex.lastIndex = 0;\r\n                        model.html = model.word.replace(new RegExp(nested.parent, 'gm'), nested.parentTag);\r\n\r\n                    }\r\n                    this.highlightQuery = this.highlightQuery.filter((h: MyHighLightQuery) => !h.existInAnotherQuery).filter((h: MyHighLightQuery) => h.name != nested.parent);\r\n                }\r\n\r\n                for (const q of this.highlightQuery) {\r\n                    const regex = new RegExp(q.name, 'gmi');\r\n                    if (regex.test(model.word)) {\r\n                        regex.lastIndex = 0;\r\n                        if (model.html) {\r\n                            let tag = model.html.split(q.name)\r\n                            for (let index = 0; index < tag.length; index++) {\r\n                                if (index == tag.length - 1)\r\n                                    break;\r\n                                tag[index] = tag[index] + q.tag;\r\n\r\n                            }\r\n                            model.html = tag.join('');\r\n                        }\r\n                        else {\r\n                            model.html = model.word.replace(new RegExp(q.name, 'gmu'), match => {\r\n                                return `<span style=\"background:${q.color}\">${match}</span>`;\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                if (model.html) {\r\n                    model.type = model.type.concat(' highlight');\r\n                    return model;\r\n                }\r\n                return model;\r\n            }\r\n            else\r\n                return model;\r\n        }\r\n\r\n    }\r\n\r\n    /** is object instance of HighlighQuery \r\n     * @param {object}  object to check\r\n     * @returns {boolean} true or false\r\n    */\r\n    private instanceOfHighlighQuery(object: any): object is HighlighQuery {\r\n        return typeof object === 'string' ? false : 'name' in object;\r\n    }\r\n\r\n    /**\r\n     * create span tag with favorite color\r\n     * @param color \r\n     * @param word \r\n     * @returns string\r\n     */\r\n    private createTag(color: string, word: string) {\r\n        return `<span style=\"background:${color}\">${word}</span>`;\r\n    }\r\n\r\n    /**\r\n     * finds words in highlightQuery array and color them\r\n     * @returns Array<Sible>\r\n     */\r\n    private findHighlightInAnother(): Array<Sible> {\r\n        const sibling: Array<Sible> = [];\r\n        this.highlightQuery.forEach((q) => {\r\n            for (let i = 0; i < this.highlightQuery.length; i++) {\r\n                const element = this.highlightQuery[i];\r\n                if (q.name.length >= element.name.length) {\r\n                    q.tag = this.createTag(q.color, q.name);\r\n                    q.existInAnotherQuery = false;\r\n                    continue;\r\n                }\r\n\r\n                if (element.name.includes(q.name)) {\r\n                    q.existInAnotherQuery = true;\r\n                    const s = sibling.find((s: Sible) => s.parent == element.name);\r\n                    if (s) {\r\n                        q.tag = this.createTag(q.color, q.name);\r\n                        q.index = element.name.indexOf(q.name);\r\n                        s.children.push(q);\r\n                    }\r\n                    else {\r\n                        const obj: Sible = {\r\n                            parent: '',\r\n                            parentTag: '',\r\n                            children: []\r\n                        }\r\n                        obj.parent = element.name;\r\n                        q.tag = this.createTag(q.color, q.name);\r\n                        q.index = element.name.indexOf(q.name);\r\n                        obj.children.push(q);\r\n                        sibling.push(obj);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        sibling.forEach((element: Sible) => {\r\n            let parent = element.parent;\r\n            element.children.sort((a, b) => a.index - b.index).forEach((child: MyHighLightQuery, i: number) => {\r\n                const pattern = new RegExp(child.name, 'gm');\r\n                const from = i == 0 ? parent.indexOf(child.name) : element.children[i - 1].tag.length;\r\n                parent = this.replaceAfterIndex(parent, pattern, child.tag, from);\r\n            })\r\n            element.parentTag = this.createTag(this.highlightQuery.find((h: MyHighLightQuery) => h.name == element.parent)!.color, parent);\r\n        })\r\n        return sibling;\r\n    }\r\n\r\n    /**\r\n     * replace words after specific index\r\n     * @param text string\r\n     * @param regex search \r\n     * @param string replace \r\n     * @param number from \r\n     * @returns string\r\n     */\r\n    private replaceAfterIndex(text: string, search: RegExp, replace: string, from: number): string {\r\n        if (text.length > from) {\r\n            return text.slice(0, from) + text.slice(from).replace(search, replace);\r\n        }\r\n        return text;\r\n    }\r\n}\r\n\r\nexport class NullModel extends ProccessModel {\r\n\r\n    /**\r\n     * get string and convert to WordModel\r\n     * @param model WordModel class\r\n     * @returns WordModel\r\n     */\r\n    process(word: string): WordModel {\r\n        return new WordModel(word);\r\n    }\r\n}\r\n\r\n","import { ProccessModel, WordModel } from \"./base\";\r\nimport { HighlighQuery, Config, IdentifyLink, GeneralModel, Type } from \"./interfaces\";\r\nimport { WordCut, Link, Hashtag, Mention, Highlight, NullModel } from \"./services\";\r\nexport { Config, HighlighQuery, IdentifyLink } from \"./interfaces\";\r\nexport { ProccessModel, WordModel } from \"./base\"\r\n\r\nexport class TruncateElement extends HTMLElement {\r\n    _highlightQuery: Array<HighlighQuery | string> = [];\r\n    config: Config = {\r\n        number: 0,\r\n        more: \"\",\r\n        less: \"\",\r\n        completeWord: false,\r\n        hashtag: false,\r\n        hasLiteral: false,\r\n        highlightCondition: 'exactly',\r\n        highlightList: [{ name: '', color: '' }],\r\n        mention: false,\r\n    };\r\n    number: number = 100;\r\n    more: string = \"show\";\r\n    less: string = \"hide\";\r\n    completeWord: boolean = false;\r\n    hashtag: boolean = false;\r\n    hasLiteral: boolean = false;\r\n    highlightCondition: string = 'exactly';\r\n    highlightList: HighlighQuery[] = [{ name: '', color: '' }];\r\n    text: string = \"\";\r\n    /** to display show or hide button*/\r\n    truncated: boolean = false;\r\n    mention: boolean = false;\r\n    identifyLink: IdentifyLink = {\r\n        hasQueryString: false,\r\n        title: \"\",\r\n        class: \"\",\r\n        style: \"text-decoration:none;color:blue;\",\r\n        domain: [],\r\n        protocol: [],\r\n        target: \"_blank\",\r\n        enabled: false\r\n    };\r\n    userModels: Array<GeneralModel> = [];\r\n    linkList: Array<string> = [];\r\n    linkCount: number = 0;\r\n    hashtagCount: number = 0;\r\n    mentionCount: number = 0;\r\n    replaceString = \"***\";\r\n    connectedLoaded = false;\r\n    dataLoaded = false;\r\n    tempHtml = \"\";\r\n    wordArray: Array<string> = [];\r\n    remainText: string = \"\";\r\n    fullText: string = \"\";\r\n    constructor() {\r\n        super();\r\n        (<any>window).trun = this;\r\n        const observer = new MutationObserver(() => {\r\n            if (this.connectedLoaded && !this.dataLoaded) {\r\n                this.initialValues();\r\n            }\r\n        });\r\n        // call 'observe' on that MutationObserver instance, \r\n        // passing it the element to observe, and the options object\r\n        observer.observe(this, { characterData: false, childList: true, attributes: false });\r\n    }\r\n\r\n    addUserModel(...userModel: Array<Type<ProccessModel>>) {\r\n        this.userModels.push(...userModel.map(f => ({ model: f } as GeneralModel)));\r\n    }\r\n\r\n    connectedCallback() {\r\n        setTimeout(() => {\r\n            this.initialValues();\r\n        }, 0)\r\n\r\n        this.connectedLoaded = true;\r\n    }\r\n\r\n    attributeChangedCallback(attrName: string, _oldVal: any, _newVal: any) {\r\n        if (this.connectedLoaded) {\r\n            this.initialValues(attrName);\r\n        }\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return ['config'];\r\n    }\r\n    /** initial values */\r\n    private initialValues(attrName: string = \"config\") {\r\n        if (!this.innerHTML) {\r\n            return;\r\n        }\r\n        if (!this.tempHtml) {\r\n            this.tempHtml = this.innerHTML;\r\n        }\r\n\r\n        const conf = this.getAttribute(attrName);\r\n        if (conf?.length) {\r\n            this.config = JSON.parse(conf);\r\n            this.number = this.config.number ? this.config.number : this.number;\r\n            this.more = this.config.more ? this.config.more : this.more;\r\n            this.less = this.config.less ? this.config.less : this.less;\r\n            this._highlightQuery = this.config.highlightList ? this.config.highlightList : this._highlightQuery;\r\n            this.highlightCondition = this.config.highlightCondition ? this.config.highlightCondition : this.highlightCondition;\r\n            this.completeWord = this.config.completeWord ? this.config.completeWord : this.completeWord;\r\n            this.hashtag = this.config.hashtag ? this.config.hashtag : this.hashtag;\r\n            this.hasLiteral = this.config.hasLiteral ? this.config.hasLiteral : this.hasLiteral;\r\n            this.mention = this.config.mention ? this.config.mention : this.mention;\r\n            if (this.config.identifyLink) {\r\n                this.identifyLink.enabled = this.config.identifyLink.enabled;\r\n                this.identifyLink.title = this.config.identifyLink.title ? this.config.identifyLink.title : this.identifyLink.title;\r\n                this.identifyLink.class = this.config.identifyLink.class ? this.config.identifyLink.class : this.identifyLink.class;\r\n                this.identifyLink.style = this.config.identifyLink.style ? this.config.identifyLink.style : this.identifyLink.style;\r\n                this.identifyLink.domain = this.config.identifyLink.domain ? this.config.identifyLink.domain : this.identifyLink.domain;\r\n                this.identifyLink.protocol = this.config.identifyLink.protocol ? this.config.identifyLink.protocol : this.identifyLink.protocol;\r\n                this.identifyLink.target = this.config.identifyLink.target ? this.config.identifyLink.target : this.identifyLink.target;\r\n                this.identifyLink.hasQueryString = this.config.identifyLink.hasQueryString ? this.config.identifyLink.hasQueryString : this.identifyLink.hasQueryString;\r\n            }\r\n        }\r\n        else\r\n            return;\r\n\r\n        this.main(this.tempHtml);\r\n        this.dataLoaded = true;\r\n    }\r\n\r\n    /** main method, start working \r\n    * @param text {string}\r\n    */\r\n    private main(text: string): void {\r\n        if (!this.hasLiteral) text = text.replace(/(\\r\\n\\t|\\r\\n|\\n|\\r\\t)/gm, ' ');\r\n\r\n        this.text = text;\r\n        this.wordArray = text.split(\" \").filter(f => this.hasLiteral ? true : f.length > 0);\r\n\r\n        const processModels: Array<GeneralModel> = [];\r\n\r\n        const _words: WordModel[] = [];\r\n        const nullModel = new NullModel(this.config);\r\n        for (const word of this.wordArray) {\r\n            _words.push(nullModel.process(word));\r\n\r\n        }\r\n\r\n        if (this.config.highlightList?.length) {\r\n            processModels.push({ model: Highlight });\r\n        }\r\n\r\n        if (this.config.identifyLink?.enabled)\r\n            processModels.push({ model: Link });\r\n\r\n        if (this.config.hashtag)\r\n            processModels.push({ model: Hashtag });\r\n\r\n        if (this.config.mention)\r\n            processModels.push({ model: Mention });\r\n\r\n        if (this.userModels?.length) {\r\n            this.userModels.forEach(user => {\r\n                processModels.push(user);\r\n            });\r\n        }\r\n\r\n        for (let model of _words) {\r\n            for (const gm of processModels) {\r\n                const wm = new gm.model(this.config);\r\n                if (model.length == 0) continue;\r\n                model = wm.process(model);\r\n            }\r\n        }\r\n        if (text.length > this.number) {\r\n            this.truncated = true;\r\n            const wordCut = new WordCut(this.number);\r\n            text = this.completeWord ? wordCut.cut(text) : text.substring(0, this.number);\r\n        }\r\n        if (_words.length) {\r\n            this.remainText = _words.slice(0, text.split(\" \").length).map(m => m.html ? m.html : m.word).join(\" \") + \" ... \";\r\n            this.fullText = _words.map(m => m.html ? m.html : m.word).join(\" \");\r\n        }\r\n        else {\r\n            this.remainText = text + \" ... \";\r\n            this.fullText = this.text;\r\n        }\r\n\r\n        this.truncated ? this.initialText(this.remainText, this.more) : this.initialText(this.fullText);\r\n        //اعمال شود این کلاس قرار داده می شود  html در \\n برای اینکه کاراکتر های\r\n        if (this.hasLiteral)\r\n            this.style.whiteSpace = 'pre-line';\r\n    }\r\n\r\n    /**\r\n     * display text in first time\r\n     * @param text \r\n     * @param toggle \r\n     */\r\n    private initialText(text: string, toggle?: string): void {\r\n        if (toggle) {\r\n            const span = this.createSpan(toggle);\r\n            this.innerHTML = text;\r\n            this.appendChild(span);\r\n        }\r\n        else\r\n            this.innerHTML = text;\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * display string after click on toggle text\r\n     * @param text string\r\n     * @param mouseDown mouse event\r\n     */\r\n    private showText(text: string, mouseDown: MouseEvent): void {\r\n        this.truncated = !this.truncated;\r\n        const span = this.createSpan(this.truncated ? this.more : this.less);\r\n        this.innerHTML = text;\r\n        if (this.hasLiteral)\r\n            this.style.whiteSpace = 'pre-line';\r\n        mouseDown.stopPropagation();\r\n        this.appendChild(span);\r\n    }\r\n\r\n    /**\r\n     * create span for toggling\r\n     * @param toggle custom word for toggle\r\n     * @returns \r\n     */\r\n    private createSpan(toggle: string): HTMLSpanElement {\r\n        const span = document.createElement('span');\r\n        span.innerHTML = ' ' + toggle;\r\n        span.style.color = '#ff00ff';\r\n        span.style.cursor = 'pointer';\r\n        span.classList.add(\"toggleText\");\r\n        span.addEventListener('click', (event) => this.showText(this.truncated ? this.fullText : this.remainText, event));\r\n        return span;\r\n    }\r\n\r\n}\r\ncustomElements.define('truncate-element', TruncateElement);\r\n\r\n"],"names":["ProccessModel","constructor","_config","WordModel","word","length","type","html","this","WordCut","num","Number","cut","text","i","substring","Link","super","LinkCount","LinkList","identifyLink","IdentifyLink","enabled","process","model","regex","m","protocolRegex","domainRegex","queryString","protocol","recognizingProtocol","domain","recongnizingDomain","hasQueryString","RegExp","exec","push","target","title","class","style","sort","find","p","join","Mention","test","Hashtag","Highlight","window","highlight","highlightList","highlightQuery","map","h","high","instanceOfHighlighQuery","name","color","tag","index","existInAnotherQuery","highlightCondition","a","b","nestedHighlightArray","findHighlightInAnother","q","pattern","lastIndex","createTag","concat","nested","parent","replace","parentTag","filter","split","match","object","sibling","forEach","element","includes","s","indexOf","children","obj","child","from","replaceAfterIndex","search","slice","NullModel","TruncateElement","HTMLElement","_highlightQuery","config","number","more","less","completeWord","hashtag","hasLiteral","mention","truncated","userModels","linkList","linkCount","hashtagCount","mentionCount","replaceString","connectedLoaded","dataLoaded","tempHtml","wordArray","remainText","fullText","trun","MutationObserver","initialValues","observe","characterData","childList","attributes","addUserModel","userModel","f","connectedCallback","setTimeout","attributeChangedCallback","attrName","_oldVal","_newVal","observedAttributes","innerHTML","conf","getAttribute","JSON","parse","main","processModels","_words","nullModel","user","gm","wm","wordCut","initialText","whiteSpace","toggle","span","createSpan","appendChild","showText","mouseDown","stopPropagation","document","createElement","cursor","classList","add","addEventListener","event","customElements","define"],"sourceRoot":""}